import pandas as pd
import yfinance as yf
import numpy as np
import plotly.graph_objects as go
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# === 1. DATA LOADING ===
print("Downloading EUR/CHF data...")
df = yf.download("EURCHF=X", start="2010-01-01", end="2024-12-31")[["Close"]].dropna()
df = df.rename(columns={"Close": "EURCHF"})
df.index = pd.to_datetime(df.index)

# === 2. MARKING SNB INTERVENTIONS ===
intervention_dates = [
    "2011-08-03", "2011-09-06", "2015-01-15",
    "2020-03-19", "2022-06-16"
]
df["Intervention"] = 0
df.loc[df.index.isin(pd.to_datetime(intervention_dates)), "Intervention"] = 1

# === 3. SCALING AND DATA PREPARATION ===
scaler = MinMaxScaler()
df[["EURCHF"]] = scaler.fit_transform(df[["EURCHF"]])

window_size = 30
X, y = [], []
for i in range(window_size, len(df)):
    features = df.iloc[i - window_size:i][["EURCHF", "Intervention"]].values
    X.append(features)
    y.append(df.iloc[i]["EURCHF"])

X, y = np.array(X), np.array(y)

# === 4. TRAIN/TEST SPLIT ===
split = int(len(X) * 0.8)
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

# === 5. IMPROVED LSTM MODEL ===
model = Sequential([
    LSTM(128, return_sequences=True, input_shape=(window_size, 2)),  # More units
    Dropout(0.3),  # Stronger regularization
    LSTM(64, return_sequences=True),
    Dropout(0.2),
    LSTM(32),
    Dense(1, activation="linear")  # Optimized activation function
])

model.compile(optimizer="adam", loss="mse", metrics=["mae"])

print("Training model...")
model.fit(X_train, y_train, epochs=15, batch_size=32, verbose=1)

# === 6. MODEL EVALUATION ===
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"MAE: {mae:.4f} | RÂ²: {r2:.4f}")

# === 7. INVERSE SCALING FOR VISUALIZATION ===
y_test_rescaled = scaler.inverse_transform(y_test.reshape(-1, 1)).flatten()
y_pred_rescaled = scaler.inverse_transform(y_pred).flatten()

# === 8. RESULT VISUALIZATION ===
dates = df.index[split + window_size:]
fig = go.Figure()
fig.add_trace(go.Scatter(x=dates, y=y_test_rescaled, name="Actual", line=dict(color='blue')))
fig.add_trace(go.Scatter(x=dates, y=y_pred_rescaled, name="Predicted", line=dict(color='red', dash='dot')))

fig.update_layout(title="EUR/CHF Forecast with LSTM",
                  xaxis_title="Date",
                  yaxis_title="EUR/CHF",
                  legend_title="Legend")

fig.show()
